// Generated by CoffeeScript 1.6.3
var apacheconf, exec, fs, mkdirp, path, which, yaml, _;

fs = require("fs");

path = require("path");

require("js-yaml");

mkdirp = require("mkdirp").sync;

which = require("which").sync;

apacheconf = require("apacheconf");

yaml = require("js-yaml");

exec = require('child_process').exec;

_ = require("underscore");

exports.run = function() {
  var config, dir, initConfig;
  console.log("Initializing `hache`...");
  config = {};
  dir = path.join(process.cwd(), '.hache');
  mkdirp(dir);
  initConfig = function(callback) {
    var httpdBin;
    httpdBin = which("httpd");
    return exec(httpdBin + " -V | grep SERVER", function(err, stdout, stderr) {
      var apacheConfig;
      apacheConfig = stdout;
      apacheConfig = apacheConfig.match(/"[^"]*"/g)[0].replace(/"/g, '');
      console.log("Server Config: " + apacheConfig);
      return apacheconf(apacheConfig, function(err, config, parser) {
        var cleanConfig, configPath, defaultConfig, default_config, doesExist, newConfig;
        if (err) {
          throw err;
        }
        cleanConfig = _.pick(config, 'ServerRoot', 'LoadModule', 'Listen', 'LogLevel', 'ErrorLog', 'DocumentRoot', 'ServerAdmin');
        Object.keys(cleanConfig).forEach(function(key) {
          if (cleanConfig[key].length === 1) {
            return cleanConfig[key] = cleanConfig[key][0].replace(/"/g, '');
          }
        });
        console.log(cleanConfig);
        default_config = path.resolve(__dirname, '../../../default_config.yml');
        defaultConfig = require(default_config);
        newConfig = _.extend(defaultConfig, cleanConfig);
        configPath = path.join(dir, 'config.yml');
        doesExist = fs.existsSync(configPath);
        if (!doesExist) {
          fs.writeFileSync(configPath, yaml.safeDump(newConfig));
          console.log("Created a new `hache` config in " + (path.join(dir, '.hache')) + ".");
          console.log("You may now edit the `.hache` file or type `hache server` to start it up!");
          return callback(null, yaml.safeLoad(fs.readFileSync(configPath, {
            encoding: "UTF8"
          })));
        } else {
          console.log("`hache` config already exists, delete the `.hache` file and re-try to create from default.");
          return callback(null, yaml.safeLoad(fs.readFileSync(configPath, {
            encoding: "UTF8"
          })));
        }
      });
    });
  };
  return initConfig(function(err, data) {
    if (err) {
      return new Error(err);
    }
    return config = data;
  });
};
